// Code generated by protoc-gen-gin. DO NOT EDIT.

package proto

import (
	gin "github.com/gin-gonic/gin"
	strings "strings"
)

// PathsMap中key为对应的handler函数名
//用户服务

type UserHttpServer struct {
	PathsMap map[string]gin.HandlerFunc
	Router   gin.IRouter
}

func RegisterUserHTTPServer(r gin.IRouter) *UserHttpServer {
	s := &UserHttpServer{
		Router:   r,
		PathsMap: make(map[string]gin.HandlerFunc),
	}
	return s
}

func (s *UserHttpServer) RegisterHandlerFunc(method string, path string, handler gin.HandlerFunc) {
	s.PathsMap[method+";"+path] = handler
}

// 获得用户列表,可通过FliterReq过滤
func (s *UserHttpServer) GetUserList(c *gin.Context) {}

// 通过用户id获取用户信息
func (s *UserHttpServer) GetUserById(c *gin.Context) {}

// 通过用户电话号码获取用户信息
func (s *UserHttpServer) GetUserByMobile(c *gin.Context) {}

// 创建一个用户
func (s *UserHttpServer) CreateUser(c *gin.Context) {}

// 更新用户,传入的用户信息字段中无论是否为空都会完全覆盖原来的值
func (s *UserHttpServer) AbsUpdateUser(c *gin.Context) {}

// 局部更新设置了值的参数
func (s *UserHttpServer) UpdateUser(c *gin.Context) {}

// 注销一个用户
func (s *UserHttpServer) DeleteUser(c *gin.Context) {}

// 权限验证
func (s *UserHttpServer) CheckUserRole(c *gin.Context) {}

func (s *UserHttpServer) register() {

	s.RegisterHandlerFunc("GET", "/users", s.GetUserList)

	s.RegisterHandlerFunc("GET", "/user/id", s.GetUserById)

	s.RegisterHandlerFunc("GET", "/user/mobile", s.GetUserByMobile)

	s.RegisterHandlerFunc("POST", "/users", s.CreateUser)

	s.RegisterHandlerFunc("PUT", "/user/id", s.AbsUpdateUser)

	s.RegisterHandlerFunc("PUT", "/user/id", s.UpdateUser)

	s.RegisterHandlerFunc("DELETE", "/user/id", s.DeleteUser)

	s.RegisterHandlerFunc("GET", "/user/id/check", s.CheckUserRole)

}

func (s *UserHttpServer) Excute() {
	s.register()
	for k, v := range s.PathsMap {
		path := strings.Split(k, ";")
		path[0] = strings.ToUpper(path[0])
		switch path[0] {
		case "GET":
			s.Router.GET(path[1], v)
		case "PUT":
			s.Router.PUT(path[1], v)
		case "DELETE":
			s.Router.DELETE(path[1], v)
		case "POST":
			s.Router.POST(path[1], v)
		case "PATCH":
			s.Router.PATCH(path[1], v)
		}
	}
}
