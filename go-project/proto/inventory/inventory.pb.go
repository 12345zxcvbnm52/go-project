// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: inventory.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecrData  []*UpdateInventoryReq `protobuf:"bytes,1,rep,name=decrData,proto3" json:"decrData,omitempty"`
	OrderSign string                `protobuf:"bytes,2,opt,name=orderSign,proto3" json:"orderSign,omitempty"`
}

func (x *UpdateStockReq) Reset() {
	*x = UpdateStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStockReq) ProtoMessage() {}

func (x *UpdateStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStockReq.ProtoReflect.Descriptor instead.
func (*UpdateStockReq) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateStockReq) GetDecrData() []*UpdateInventoryReq {
	if x != nil {
		return x.DecrData
	}
	return nil
}

func (x *UpdateStockReq) GetOrderSign() string {
	if x != nil {
		return x.OrderSign
	}
	return ""
}

type CreateInventoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId  uint32 `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
	GoodsNum int32  `protobuf:"varint,2,opt,name=goodsNum,proto3" json:"goodsNum,omitempty"`
}

func (x *CreateInventoryReq) Reset() {
	*x = CreateInventoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInventoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryReq) ProtoMessage() {}

func (x *CreateInventoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryReq.ProtoReflect.Descriptor instead.
func (*CreateInventoryReq) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *CreateInventoryReq) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *CreateInventoryReq) GetGoodsNum() int32 {
	if x != nil {
		return x.GoodsNum
	}
	return 0
}

type CreateInventoryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId  uint32 `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
	GoodsNum int32  `protobuf:"varint,2,opt,name=goodsNum,proto3" json:"goodsNum,omitempty"`
	Id       uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateInventoryRes) Reset() {
	*x = CreateInventoryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInventoryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryRes) ProtoMessage() {}

func (x *CreateInventoryRes) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryRes.ProtoReflect.Descriptor instead.
func (*CreateInventoryRes) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *CreateInventoryRes) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *CreateInventoryRes) GetGoodsNum() int32 {
	if x != nil {
		return x.GoodsNum
	}
	return 0
}

func (x *CreateInventoryRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type InventoryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId uint32 `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
}

func (x *InventoryInfoReq) Reset() {
	*x = InventoryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryInfoReq) ProtoMessage() {}

func (x *InventoryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryInfoReq.ProtoReflect.Descriptor instead.
func (*InventoryInfoReq) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *InventoryInfoReq) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type InventoryInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId  uint32 `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
	GoodsNum int32  `protobuf:"varint,2,opt,name=goodsNum,proto3" json:"goodsNum,omitempty"`
}

func (x *InventoryInfoRes) Reset() {
	*x = InventoryInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryInfoRes) ProtoMessage() {}

func (x *InventoryInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryInfoRes.ProtoReflect.Descriptor instead.
func (*InventoryInfoRes) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *InventoryInfoRes) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *InventoryInfoRes) GetGoodsNum() int32 {
	if x != nil {
		return x.GoodsNum
	}
	return 0
}

type UpdateInventoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId  uint32 `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
	GoodsNum int32  `protobuf:"varint,2,opt,name=goodsNum,proto3" json:"goodsNum,omitempty"`
}

func (x *UpdateInventoryReq) Reset() {
	*x = UpdateInventoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInventoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInventoryReq) ProtoMessage() {}

func (x *UpdateInventoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInventoryReq.ProtoReflect.Descriptor instead.
func (*UpdateInventoryReq) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateInventoryReq) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *UpdateInventoryReq) GetGoodsNum() int32 {
	if x != nil {
		return x.GoodsNum
	}
	return 0
}

type SetInventoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsId  uint32 `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`
	GoodsNum int32  `protobuf:"varint,2,opt,name=goodsNum,proto3" json:"goodsNum,omitempty"`
}

func (x *SetInventoryReq) Reset() {
	*x = SetInventoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInventoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInventoryReq) ProtoMessage() {}

func (x *SetInventoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInventoryReq.ProtoReflect.Descriptor instead.
func (*SetInventoryReq) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *SetInventoryReq) GetGoodsId() uint32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *SetInventoryReq) GetGoodsNum() int32 {
	if x != nil {
		return x.GoodsNum
	}
	return 0
}

type RebackStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderSign string `protobuf:"bytes,1,opt,name=orderSign,proto3" json:"orderSign,omitempty"`
}

func (x *RebackStockReq) Reset() {
	*x = RebackStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebackStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebackStockReq) ProtoMessage() {}

func (x *RebackStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebackStockReq.ProtoReflect.Descriptor instead.
func (*RebackStockReq) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *RebackStockReq) GetOrderSign() string {
	if x != nil {
		return x.OrderSign
	}
	return ""
}

var File_inventory_proto protoreflect.FileDescriptor

var file_inventory_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x52,
	0x08, 0x64, 0x65, 0x63, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x75, 0x6d, 0x22, 0x5a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2c, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x22, 0x48, 0x0a,
	0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x4a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x4e, 0x75, 0x6d, 0x22, 0x47, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x2e, 0x0a, 0x0e,
	0x52, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x32, 0xb7, 0x12, 0x0a,
	0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xc8, 0x03, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8b, 0x03, 0xca, 0xe4, 0x1d, 0xf2, 0x02, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22,
	0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30,
	0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e,
	0x69, 0x6c, 0x7d, 0x42, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xb8,
	0xaa, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0xba, 0x93, 0xe5, 0xad, 0x98, 0x52, 0x3e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x29, 0xe6, 0xac, 0xb2, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0xe5, 0xba, 0x93, 0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x27, 0x52, 0x42, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x29, 0xe6, 0xac, 0xb2, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0xe5, 0xba, 0x93, 0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0xcc, 0x03, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x10, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x95, 0x03, 0xca,
	0xe4, 0x1d, 0xfe, 0x02, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30,
	0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0xba, 0x93, 0xe5,
	0xad, 0x98, 0x52, 0x44, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x20, 0x62, 0x6f, 0x64, 0x79,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe6, 0xac, 0xb2, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0xba, 0x93, 0xe5,
	0xad, 0x98, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x27, 0x52, 0x48, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e,
	0x75, 0x6d, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe6, 0xac, 0xb2,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x95, 0x86, 0xe5,
	0x93, 0x81, 0xe5, 0xba, 0x93, 0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0, 0xe9, 0x87,
	0x8f, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x1a, 0x0a, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0xff, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0xc8, 0x02, 0xca, 0xe4,
	0x1d, 0xa6, 0x02, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x3d, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30,
	0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0xba, 0x93, 0xe5, 0xad, 0x98, 0xe4, 0xbf, 0xa1, 0xe6,
	0x81, 0xaf, 0x52, 0x35, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0xba, 0x93,
	0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xe9, 0x03, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x72, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x0f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb2, 0x03,
	0xca, 0xe4, 0x1d, 0x96, 0x03, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c,
	0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34,
	0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x12, 0xe6, 0x89, 0xa3, 0xe5, 0x87, 0x8f, 0xe5, 0x95, 0x86,
	0xe5, 0x93, 0x81, 0xe5, 0xba, 0x93, 0xe5, 0xad, 0x98, 0x52, 0x4d, 0x64, 0x65, 0x63, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x5b, 0x5d, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x29, 0xe6, 0x89, 0xa3, 0xe5, 0x87, 0x8f, 0xe5, 0xba, 0x93, 0xe5, 0xad, 0x98, 0xe7, 0x9a,
	0x84, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x27, 0x52, 0x31, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0xe8, 0xae,
	0xa2, 0xe5, 0x8d, 0x95, 0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0f, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65,
	0x63, 0x72, 0x12, 0xe9, 0x03, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x0f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb2, 0x03, 0xca, 0xe4, 0x1d, 0x96,
	0x03, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c,
	0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35,
	0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30, 0x20, 0x7b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c,
	0x7d, 0x42, 0x12, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5,
	0xba, 0x93, 0xe5, 0xad, 0x98, 0x52, 0x4d, 0x69, 0x6e, 0x63, 0x72, 0x44, 0x61, 0x74, 0x61, 0x20,
	0x62, 0x6f, 0x64, 0x79, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20,
	0x27, 0x28, 0x5b, 0x5d, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x29, 0xe5, 0xa2,
	0x9e, 0xe5, 0x8a, 0xa0, 0xe5, 0xba, 0x93, 0xe5, 0xad, 0x98, 0xe7, 0x9a, 0x84, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x27, 0x52, 0x31, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x20,
	0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x20, 0x27, 0x28, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95,
	0xe7, 0xad, 0xbe, 0xe5, 0x90, 0x8d, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0f, 0x2f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x63, 0x72, 0x12, 0x36,
	0x0a, 0x0b, 0x52, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x0f, 0x2e,
	0x52, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventory_proto_rawDescOnce sync.Once
	file_inventory_proto_rawDescData = file_inventory_proto_rawDesc
)

func file_inventory_proto_rawDescGZIP() []byte {
	file_inventory_proto_rawDescOnce.Do(func() {
		file_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventory_proto_rawDescData)
	})
	return file_inventory_proto_rawDescData
}

var file_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_inventory_proto_goTypes = []interface{}{
	(*UpdateStockReq)(nil),     // 0: UpdateStockReq
	(*CreateInventoryReq)(nil), // 1: CreateInventoryReq
	(*CreateInventoryRes)(nil), // 2: CreateInventoryRes
	(*InventoryInfoReq)(nil),   // 3: InventoryInfoReq
	(*InventoryInfoRes)(nil),   // 4: InventoryInfoRes
	(*UpdateInventoryReq)(nil), // 5: UpdateInventoryReq
	(*SetInventoryReq)(nil),    // 6: SetInventoryReq
	(*RebackStockReq)(nil),     // 7: RebackStockReq
	(*emptypb.Empty)(nil),      // 8: google.protobuf.Empty
}
var file_inventory_proto_depIdxs = []int32{
	5, // 0: UpdateStockReq.decrData:type_name -> UpdateInventoryReq
	1, // 1: Inventory.CreateStock:input_type -> CreateInventoryReq
	6, // 2: Inventory.SetStock:input_type -> SetInventoryReq
	3, // 3: Inventory.GetStockInfo:input_type -> InventoryInfoReq
	0, // 4: Inventory.DecrStock:input_type -> UpdateStockReq
	0, // 5: Inventory.IncrStock:input_type -> UpdateStockReq
	7, // 6: Inventory.RebackStock:input_type -> RebackStockReq
	8, // 7: Inventory.CreateStock:output_type -> google.protobuf.Empty
	8, // 8: Inventory.SetStock:output_type -> google.protobuf.Empty
	4, // 9: Inventory.GetStockInfo:output_type -> InventoryInfoRes
	8, // 10: Inventory.DecrStock:output_type -> google.protobuf.Empty
	8, // 11: Inventory.IncrStock:output_type -> google.protobuf.Empty
	8, // 12: Inventory.RebackStock:output_type -> google.protobuf.Empty
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_inventory_proto_init() }
func file_inventory_proto_init() {
	if File_inventory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inventory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInventoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInventoryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInventoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInventoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebackStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventory_proto_goTypes,
		DependencyIndexes: file_inventory_proto_depIdxs,
		MessageInfos:      file_inventory_proto_msgTypes,
	}.Build()
	File_inventory_proto = out.File
	file_inventory_proto_rawDesc = nil
	file_inventory_proto_goTypes = nil
	file_inventory_proto_depIdxs = nil
}
