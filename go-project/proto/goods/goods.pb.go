// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: goods.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 返回一堆商品目录
type CategoryListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data     []*CategoryInfoRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	JsonData string             `protobuf:"bytes,3,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
}

func (x *CategoryListRes) Reset() {
	*x = CategoryListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListRes) ProtoMessage() {}

func (x *CategoryListRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListRes.ProtoReflect.Descriptor instead.
func (*CategoryListRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{0}
}

func (x *CategoryListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CategoryListRes) GetData() []*CategoryInfoRes {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CategoryListRes) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

// 商品目录信息类
type CategoryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CategoryInfoReq) Reset() {
	*x = CategoryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfoReq) ProtoMessage() {}

func (x *CategoryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfoReq.ProtoReflect.Descriptor instead.
func (*CategoryInfoReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{1}
}

func (x *CategoryInfoReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryInfoReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 商品目录信息类
type CreateCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentCategoryId uint32 `protobuf:"varint,2,opt,name=parentCategoryId,proto3" json:"parentCategoryId,omitempty"`
	Level            int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	OnTable          bool   `protobuf:"varint,4,opt,name=onTable,proto3" json:"onTable,omitempty"`
}

func (x *CreateCategoryReq) Reset() {
	*x = CreateCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryReq) ProtoMessage() {}

func (x *CreateCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryReq.ProtoReflect.Descriptor instead.
func (*CreateCategoryReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCategoryReq) GetParentCategoryId() uint32 {
	if x != nil {
		return x.ParentCategoryId
	}
	return 0
}

func (x *CreateCategoryReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CreateCategoryReq) GetOnTable() bool {
	if x != nil {
		return x.OnTable
	}
	return false
}

// 商品目录信息类
type UpdateCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentCategoryId uint32 `protobuf:"varint,3,opt,name=parentCategoryId,proto3" json:"parentCategoryId,omitempty"`
	Level            int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	OnTable          bool   `protobuf:"varint,5,opt,name=onTable,proto3" json:"onTable,omitempty"`
}

func (x *UpdateCategoryReq) Reset() {
	*x = UpdateCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryReq) ProtoMessage() {}

func (x *UpdateCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryReq.ProtoReflect.Descriptor instead.
func (*UpdateCategoryReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCategoryReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCategoryReq) GetParentCategoryId() uint32 {
	if x != nil {
		return x.ParentCategoryId
	}
	return 0
}

func (x *UpdateCategoryReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdateCategoryReq) GetOnTable() bool {
	if x != nil {
		return x.OnTable
	}
	return false
}

// 返回商品目录信息
type CategoryInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentCategoryId uint32 `protobuf:"varint,3,opt,name=parentCategoryId,proto3" json:"parentCategoryId,omitempty"`
	Level            int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	OnTable          bool   `protobuf:"varint,5,opt,name=onTable,proto3" json:"onTable,omitempty"`
}

func (x *CategoryInfoRes) Reset() {
	*x = CategoryInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfoRes) ProtoMessage() {}

func (x *CategoryInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfoRes.ProtoReflect.Descriptor instead.
func (*CategoryInfoRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{4}
}

func (x *CategoryInfoRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryInfoRes) GetParentCategoryId() uint32 {
	if x != nil {
		return x.ParentCategoryId
	}
	return 0
}

func (x *CategoryInfoRes) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CategoryInfoRes) GetOnTable() bool {
	if x != nil {
		return x.OnTable
	}
	return false
}

// 指定删除目录
type DelCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelCategoryReq) Reset() {
	*x = DelCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCategoryReq) ProtoMessage() {}

func (x *DelCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCategoryReq.ProtoReflect.Descriptor instead.
func (*DelCategoryReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{5}
}

func (x *DelCategoryReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 请求对应商品目录的子目录
type SubCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *SubCategoryReq) Reset() {
	*x = SubCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCategoryReq) ProtoMessage() {}

func (x *SubCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCategoryReq.ProtoReflect.Descriptor instead.
func (*SubCategoryReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{6}
}

func (x *SubCategoryReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubCategoryReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// 返回查询到的子商品目录
type SubCategoryListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 既把Sub目录返回,也把Sub的Sub目录返回
	SelfInfo *CategoryInfoRes   `protobuf:"bytes,2,opt,name=selfInfo,proto3" json:"selfInfo,omitempty"`
	SubInfo  []*CategoryInfoRes `protobuf:"bytes,3,rep,name=subInfo,proto3" json:"subInfo,omitempty"`
}

func (x *SubCategoryListRes) Reset() {
	*x = SubCategoryListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCategoryListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCategoryListRes) ProtoMessage() {}

func (x *SubCategoryListRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCategoryListRes.ProtoReflect.Descriptor instead.
func (*SubCategoryListRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{7}
}

func (x *SubCategoryListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SubCategoryListRes) GetSelfInfo() *CategoryInfoRes {
	if x != nil {
		return x.SelfInfo
	}
	return nil
}

func (x *SubCategoryListRes) GetSubInfo() []*CategoryInfoRes {
	if x != nil {
		return x.SubInfo
	}
	return nil
}

// 返回商品简明信息
type CategoryBriefInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CategoryBriefInfoRes) Reset() {
	*x = CategoryBriefInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBriefInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBriefInfoRes) ProtoMessage() {}

func (x *CategoryBriefInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBriefInfoRes.ProtoReflect.Descriptor instead.
func (*CategoryBriefInfoRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{8}
}

func (x *CategoryBriefInfoRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryBriefInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CategoryBrandFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PagesNum int32 `protobuf:"varint,1,opt,name=pagesNum,proto3" json:"pagesNum,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *CategoryBrandFilterReq) Reset() {
	*x = CategoryBrandFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBrandFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBrandFilterReq) ProtoMessage() {}

func (x *CategoryBrandFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBrandFilterReq.ProtoReflect.Descriptor instead.
func (*CategoryBrandFilterReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{9}
}

func (x *CategoryBrandFilterReq) GetPagesNum() int32 {
	if x != nil {
		return x.PagesNum
	}
	return 0
}

func (x *CategoryBrandFilterReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 请求获得商品品牌与商品目录
type CategoryBrandInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId uint32 `protobuf:"varint,2,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId    uint32 `protobuf:"varint,3,opt,name=brandId,proto3" json:"brandId,omitempty"`
}

func (x *CategoryBrandInfoReq) Reset() {
	*x = CategoryBrandInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBrandInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBrandInfoReq) ProtoMessage() {}

func (x *CategoryBrandInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBrandInfoReq.ProtoReflect.Descriptor instead.
func (*CategoryBrandInfoReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{10}
}

func (x *CategoryBrandInfoReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryBrandInfoReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CategoryBrandInfoReq) GetBrandId() uint32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

// 请求获得商品品牌与商品目录
type DelCategoryBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelCategoryBrandReq) Reset() {
	*x = DelCategoryBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCategoryBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCategoryBrandReq) ProtoMessage() {}

func (x *DelCategoryBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCategoryBrandReq.ProtoReflect.Descriptor instead.
func (*DelCategoryBrandReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{11}
}

func (x *DelCategoryBrandReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 请求获得商品品牌与商品目录
type CreateCategoryBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId uint32 `protobuf:"varint,1,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId    uint32 `protobuf:"varint,2,opt,name=brandId,proto3" json:"brandId,omitempty"`
}

func (x *CreateCategoryBrandReq) Reset() {
	*x = CreateCategoryBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryBrandReq) ProtoMessage() {}

func (x *CreateCategoryBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryBrandReq.ProtoReflect.Descriptor instead.
func (*CreateCategoryBrandReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCategoryBrandReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CreateCategoryBrandReq) GetBrandId() uint32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

// 请求获得商品品牌与商品目录
type UpdateCategoryBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId uint32 `protobuf:"varint,2,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId    uint32 `protobuf:"varint,3,opt,name=brandId,proto3" json:"brandId,omitempty"`
}

func (x *UpdateCategoryBrandReq) Reset() {
	*x = UpdateCategoryBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryBrandReq) ProtoMessage() {}

func (x *UpdateCategoryBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryBrandReq.ProtoReflect.Descriptor instead.
func (*UpdateCategoryBrandReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCategoryBrandReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCategoryBrandReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdateCategoryBrandReq) GetBrandId() uint32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type CategoryBrandListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*CategoryBrandInfoRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CategoryBrandListRes) Reset() {
	*x = CategoryBrandListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBrandListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBrandListRes) ProtoMessage() {}

func (x *CategoryBrandListRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBrandListRes.ProtoReflect.Descriptor instead.
func (*CategoryBrandListRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{14}
}

func (x *CategoryBrandListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CategoryBrandListRes) GetData() []*CategoryBrandInfoRes {
	if x != nil {
		return x.Data
	}
	return nil
}

// 返回获得商品品牌与商品目录?
type CategoryBrandInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BrandInfo    *BrandInfoRes    `protobuf:"bytes,2,opt,name=brandInfo,proto3" json:"brandInfo,omitempty"`
	CategoryInfo *CategoryInfoRes `protobuf:"bytes,3,opt,name=categoryInfo,proto3" json:"categoryInfo,omitempty"`
}

func (x *CategoryBrandInfoRes) Reset() {
	*x = CategoryBrandInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBrandInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBrandInfoRes) ProtoMessage() {}

func (x *CategoryBrandInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBrandInfoRes.ProtoReflect.Descriptor instead.
func (*CategoryBrandInfoRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{15}
}

func (x *CategoryBrandInfoRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryBrandInfoRes) GetBrandInfo() *BrandInfoRes {
	if x != nil {
		return x.BrandInfo
	}
	return nil
}

func (x *CategoryBrandInfoRes) GetCategoryInfo() *CategoryInfoRes {
	if x != nil {
		return x.CategoryInfo
	}
	return nil
}

// 返回一堆滑动窗口商品信息
type BannerListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*BannerInfoRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BannerListRes) Reset() {
	*x = BannerListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerListRes) ProtoMessage() {}

func (x *BannerListRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerListRes.ProtoReflect.Descriptor instead.
func (*BannerListRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{16}
}

func (x *BannerListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BannerListRes) GetData() []*BannerInfoRes {
	if x != nil {
		return x.Data
	}
	return nil
}

// 请求滑动窗口的商品
type BannerInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *BannerInfoReq) Reset() {
	*x = BannerInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerInfoReq) ProtoMessage() {}

func (x *BannerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerInfoReq.ProtoReflect.Descriptor instead.
func (*BannerInfoReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{17}
}

func (x *BannerInfoReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BannerInfoReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// 请求滑动窗口的商品
type CreateBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Url   string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateBannerReq) Reset() {
	*x = CreateBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBannerReq) ProtoMessage() {}

func (x *CreateBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBannerReq.ProtoReflect.Descriptor instead.
func (*CreateBannerReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{18}
}

func (x *CreateBannerReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CreateBannerReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateBannerReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 请求滑动窗口的商品
type UpdateBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Url   string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UpdateBannerReq) Reset() {
	*x = UpdateBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBannerReq) ProtoMessage() {}

func (x *UpdateBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBannerReq.ProtoReflect.Descriptor instead.
func (*UpdateBannerReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateBannerReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBannerReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UpdateBannerReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *UpdateBannerReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 返回滑动窗口的商品的信息
type BannerInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Url   string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BannerInfoRes) Reset() {
	*x = BannerInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerInfoRes) ProtoMessage() {}

func (x *BannerInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerInfoRes.ProtoReflect.Descriptor instead.
func (*BannerInfoRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{20}
}

func (x *BannerInfoRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BannerInfoRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BannerInfoRes) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BannerInfoRes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DelBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *DelBannerReq) Reset() {
	*x = DelBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBannerReq) ProtoMessage() {}

func (x *DelBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBannerReq.ProtoReflect.Descriptor instead.
func (*DelBannerReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{21}
}

func (x *DelBannerReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelBannerReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// 请求限制数量的品牌类型
type BrandFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PagesNum int32 `protobuf:"varint,1,opt,name=pagesNum,proto3" json:"pagesNum,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *BrandFilterReq) Reset() {
	*x = BrandFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandFilterReq) ProtoMessage() {}

func (x *BrandFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandFilterReq.ProtoReflect.Descriptor instead.
func (*BrandFilterReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{22}
}

func (x *BrandFilterReq) GetPagesNum() int32 {
	if x != nil {
		return x.PagesNum
	}
	return 0
}

func (x *BrandFilterReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 请求商品品牌
type BrandInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BrandInfoReq) Reset() {
	*x = BrandInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandInfoReq) ProtoMessage() {}

func (x *BrandInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandInfoReq.ProtoReflect.Descriptor instead.
func (*BrandInfoReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{23}
}

func (x *BrandInfoReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 请求商品品牌
type CreateBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Logo string `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (x *CreateBrandReq) Reset() {
	*x = CreateBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBrandReq) ProtoMessage() {}

func (x *CreateBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBrandReq.ProtoReflect.Descriptor instead.
func (*CreateBrandReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{24}
}

func (x *CreateBrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBrandReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

// 请求商品品牌
type UpdateBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Logo string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (x *UpdateBrandReq) Reset() {
	*x = UpdateBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrandReq) ProtoMessage() {}

func (x *UpdateBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrandReq.ProtoReflect.Descriptor instead.
func (*UpdateBrandReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateBrandReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBrandReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

// 返回品牌信息
type BrandInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Logo string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (x *BrandInfoRes) Reset() {
	*x = BrandInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandInfoRes) ProtoMessage() {}

func (x *BrandInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandInfoRes.ProtoReflect.Descriptor instead.
func (*BrandInfoRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{26}
}

func (x *BrandInfoRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BrandInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrandInfoRes) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

// 返回一堆品牌信息
type BrandListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*BrandInfoRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrandListRes) Reset() {
	*x = BrandListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandListRes) ProtoMessage() {}

func (x *BrandListRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandListRes.ProtoReflect.Descriptor instead.
func (*BrandListRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{27}
}

func (x *BrandListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BrandListRes) GetData() []*BrandInfoRes {
	if x != nil {
		return x.Data
	}
	return nil
}

// 请求删除一个指定的品牌
type DelBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DelBrandReq) Reset() {
	*x = DelBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBrandReq) ProtoMessage() {}

func (x *DelBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBrandReq.ProtoReflect.Descriptor instead.
func (*DelBrandReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{28}
}

func (x *DelBrandReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelBrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 请求删除指定商品
type DelGoodsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelGoodsReq) Reset() {
	*x = DelGoodsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelGoodsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelGoodsReq) ProtoMessage() {}

func (x *DelGoodsReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelGoodsReq.ProtoReflect.Descriptor instead.
func (*DelGoodsReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{29}
}

func (x *DelGoodsReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 请求具体商品信息
type GoodsInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GoodsInfoReq) Reset() {
	*x = GoodsInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsInfoReq) ProtoMessage() {}

func (x *GoodsInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsInfoReq.ProtoReflect.Descriptor instead.
func (*GoodsInfoReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{30}
}

func (x *GoodsInfoReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GoodsIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GoodsIdsReq) Reset() {
	*x = GoodsIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsIdsReq) ProtoMessage() {}

func (x *GoodsIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsIdsReq.ProtoReflect.Descriptor instead.
func (*GoodsIdsReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{31}
}

func (x *GoodsIdsReq) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 请求创建/或创建商品
type CreateGoodsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId  uint32   `protobuf:"varint,1,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId     uint32   `protobuf:"varint,2,opt,name=brandId,proto3" json:"brandId,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MarketPrice float32  `protobuf:"fixed32,4,opt,name=marketPrice,proto3" json:"marketPrice,omitempty"`
	SalePrice   float32  `protobuf:"fixed32,5,opt,name=salePrice,proto3" json:"salePrice,omitempty"`
	GoodsBrief  string   `protobuf:"bytes,6,opt,name=goodsBrief,proto3" json:"goodsBrief,omitempty"`
	ShipFree    bool     `protobuf:"varint,7,opt,name=shipFree,proto3" json:"shipFree,omitempty"`
	Images      []string `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty"`
	DescImages  []string `protobuf:"bytes,9,rep,name=descImages,proto3" json:"descImages,omitempty"`
	FirstImage  string   `protobuf:"bytes,10,opt,name=firstImage,proto3" json:"firstImage,omitempty"`
}

func (x *CreateGoodsReq) Reset() {
	*x = CreateGoodsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodsReq) ProtoMessage() {}

func (x *CreateGoodsReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodsReq.ProtoReflect.Descriptor instead.
func (*CreateGoodsReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{32}
}

func (x *CreateGoodsReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CreateGoodsReq) GetBrandId() uint32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *CreateGoodsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGoodsReq) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

func (x *CreateGoodsReq) GetSalePrice() float32 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *CreateGoodsReq) GetGoodsBrief() string {
	if x != nil {
		return x.GoodsBrief
	}
	return ""
}

func (x *CreateGoodsReq) GetShipFree() bool {
	if x != nil {
		return x.ShipFree
	}
	return false
}

func (x *CreateGoodsReq) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CreateGoodsReq) GetDescImages() []string {
	if x != nil {
		return x.DescImages
	}
	return nil
}

func (x *CreateGoodsReq) GetFirstImage() string {
	if x != nil {
		return x.FirstImage
	}
	return ""
}

// 请求创建/或创建商品
type UpdateGoodsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId  uint32   `protobuf:"varint,2,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId     uint32   `protobuf:"varint,3,opt,name=brandId,proto3" json:"brandId,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	MarketPrice float32  `protobuf:"fixed32,5,opt,name=marketPrice,proto3" json:"marketPrice,omitempty"`
	SalePrice   float32  `protobuf:"fixed32,6,opt,name=salePrice,proto3" json:"salePrice,omitempty"`
	GoodsBrief  string   `protobuf:"bytes,7,opt,name=goodsBrief,proto3" json:"goodsBrief,omitempty"`
	ShipFree    bool     `protobuf:"varint,8,opt,name=shipFree,proto3" json:"shipFree,omitempty"`
	Images      []string `protobuf:"bytes,9,rep,name=images,proto3" json:"images,omitempty"`
	DescImages  []string `protobuf:"bytes,10,rep,name=descImages,proto3" json:"descImages,omitempty"`
	FirstImage  string   `protobuf:"bytes,11,opt,name=firstImage,proto3" json:"firstImage,omitempty"`
	Status      int32    `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateGoodsReq) Reset() {
	*x = UpdateGoodsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodsReq) ProtoMessage() {}

func (x *UpdateGoodsReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodsReq.ProtoReflect.Descriptor instead.
func (*UpdateGoodsReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateGoodsReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateGoodsReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdateGoodsReq) GetBrandId() uint32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *UpdateGoodsReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGoodsReq) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

func (x *UpdateGoodsReq) GetSalePrice() float32 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *UpdateGoodsReq) GetGoodsBrief() string {
	if x != nil {
		return x.GoodsBrief
	}
	return ""
}

func (x *UpdateGoodsReq) GetShipFree() bool {
	if x != nil {
		return x.ShipFree
	}
	return false
}

func (x *UpdateGoodsReq) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *UpdateGoodsReq) GetDescImages() []string {
	if x != nil {
		return x.DescImages
	}
	return nil
}

func (x *UpdateGoodsReq) GetFirstImage() string {
	if x != nil {
		return x.FirstImage
	}
	return ""
}

func (x *UpdateGoodsReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 请求并过滤商品信息
type GoodsFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinPrice int32 `protobuf:"varint,1,opt,name=minPrice,proto3" json:"minPrice,omitempty"`
	MaxPrice int32 `protobuf:"varint,2,opt,name=maxPrice,proto3" json:"maxPrice,omitempty"`
	IsHot    bool  `protobuf:"varint,3,opt,name=isHot,proto3" json:"isHot,omitempty"`
	IsNew    bool  `protobuf:"varint,4,opt,name=isNew,proto3" json:"isNew,omitempty"`
	Status   int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	// 确定点击的目录是哪一级,会递归显示下一层(或者说下几层)目录
	CategoryId uint32 `protobuf:"varint,6,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	PagesNum   int32  `protobuf:"varint,7,opt,name=pagesNum,proto3" json:"pagesNum,omitempty"`
	PageSize   int32  `protobuf:"varint,8,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	KeyWords   string `protobuf:"bytes,9,opt,name=keyWords,proto3" json:"keyWords,omitempty"`
	BrandId    uint32 `protobuf:"varint,10,opt,name=brandId,proto3" json:"brandId,omitempty"`
	Id         uint32 `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GoodsFilterReq) Reset() {
	*x = GoodsFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsFilterReq) ProtoMessage() {}

func (x *GoodsFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsFilterReq.ProtoReflect.Descriptor instead.
func (*GoodsFilterReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{34}
}

func (x *GoodsFilterReq) GetMinPrice() int32 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *GoodsFilterReq) GetMaxPrice() int32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *GoodsFilterReq) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *GoodsFilterReq) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *GoodsFilterReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GoodsFilterReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *GoodsFilterReq) GetPagesNum() int32 {
	if x != nil {
		return x.PagesNum
	}
	return 0
}

func (x *GoodsFilterReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GoodsFilterReq) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *GoodsFilterReq) GetBrandId() uint32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *GoodsFilterReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 返回具体商品信息
type GoodsInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId  uint32  `protobuf:"varint,2,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId     uint32  `protobuf:"varint,3,opt,name=BrandId,proto3" json:"BrandId,omitempty"`
	Name        string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	GoodsSign   string  `protobuf:"bytes,5,opt,name=goodsSign,proto3" json:"goodsSign,omitempty"`
	ClickNum    int32   `protobuf:"varint,6,opt,name=clickNum,proto3" json:"clickNum,omitempty"`
	SoldNum     int32   `protobuf:"varint,7,opt,name=soldNum,proto3" json:"soldNum,omitempty"`
	FavorNum    int32   `protobuf:"varint,8,opt,name=favorNum,proto3" json:"favorNum,omitempty"`
	MarketPrice float32 `protobuf:"fixed32,9,opt,name=marketPrice,proto3" json:"marketPrice,omitempty"`
	SalePrice   float32 `protobuf:"fixed32,10,opt,name=salePrice,proto3" json:"salePrice,omitempty"`
	ShipFree    bool    `protobuf:"varint,11,opt,name=shipFree,proto3" json:"shipFree,omitempty"`
	FirstImage  string  `protobuf:"bytes,12,opt,name=firstImage,proto3" json:"firstImage,omitempty"`
	IsNew       bool    `protobuf:"varint,13,opt,name=isNew,proto3" json:"isNew,omitempty"`
	IsHot       bool    `protobuf:"varint,14,opt,name=isHot,proto3" json:"isHot,omitempty"`
	Status      int32   `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoodsInfoRes) Reset() {
	*x = GoodsInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsInfoRes) ProtoMessage() {}

func (x *GoodsInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsInfoRes.ProtoReflect.Descriptor instead.
func (*GoodsInfoRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{35}
}

func (x *GoodsInfoRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GoodsInfoRes) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *GoodsInfoRes) GetBrandId() uint32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *GoodsInfoRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoodsInfoRes) GetGoodsSign() string {
	if x != nil {
		return x.GoodsSign
	}
	return ""
}

func (x *GoodsInfoRes) GetClickNum() int32 {
	if x != nil {
		return x.ClickNum
	}
	return 0
}

func (x *GoodsInfoRes) GetSoldNum() int32 {
	if x != nil {
		return x.SoldNum
	}
	return 0
}

func (x *GoodsInfoRes) GetFavorNum() int32 {
	if x != nil {
		return x.FavorNum
	}
	return 0
}

func (x *GoodsInfoRes) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

func (x *GoodsInfoRes) GetSalePrice() float32 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *GoodsInfoRes) GetShipFree() bool {
	if x != nil {
		return x.ShipFree
	}
	return false
}

func (x *GoodsInfoRes) GetFirstImage() string {
	if x != nil {
		return x.FirstImage
	}
	return ""
}

func (x *GoodsInfoRes) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *GoodsInfoRes) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *GoodsInfoRes) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 返回具体商品信息
type GoodsDetailRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId  uint32   `protobuf:"varint,2,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	BrandId     uint32   `protobuf:"varint,3,opt,name=brandId,proto3" json:"brandId,omitempty"`
	Name        string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	GoodsSign   string   `protobuf:"bytes,5,opt,name=goodsSign,proto3" json:"goodsSign,omitempty"`
	ClickNum    int32    `protobuf:"varint,6,opt,name=clickNum,proto3" json:"clickNum,omitempty"`
	SoldNum     int32    `protobuf:"varint,7,opt,name=soldNum,proto3" json:"soldNum,omitempty"`
	FavorNum    int32    `protobuf:"varint,8,opt,name=favorNum,proto3" json:"favorNum,omitempty"`
	MarketPrice float32  `protobuf:"fixed32,9,opt,name=marketPrice,proto3" json:"marketPrice,omitempty"`
	SalePrice   float32  `protobuf:"fixed32,10,opt,name=salePrice,proto3" json:"salePrice,omitempty"`
	GoodsBrief  string   `protobuf:"bytes,11,opt,name=goodsBrief,proto3" json:"goodsBrief,omitempty"`
	ShipFree    bool     `protobuf:"varint,12,opt,name=shipFree,proto3" json:"shipFree,omitempty"`
	Images      []string `protobuf:"bytes,13,rep,name=images,proto3" json:"images,omitempty"`
	DescImages  []string `protobuf:"bytes,14,rep,name=descImages,proto3" json:"descImages,omitempty"`
	FirstImage  string   `protobuf:"bytes,15,opt,name=firstImage,proto3" json:"firstImage,omitempty"`
	IsNew       bool     `protobuf:"varint,16,opt,name=isNew,proto3" json:"isNew,omitempty"`
	IsHot       bool     `protobuf:"varint,17,opt,name=isHot,proto3" json:"isHot,omitempty"`
	Status      int32    `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	// 这里还把该商品目录的简明信息拿到了
	Category      *CategoryBriefInfoRes `protobuf:"bytes,19,opt,name=category,proto3" json:"category,omitempty"`
	Brand         *BrandInfoRes         `protobuf:"bytes,20,opt,name=brand,proto3" json:"brand,omitempty"`
	GoodsDetailId uint32                `protobuf:"varint,21,opt,name=GoodsDetailId,proto3" json:"GoodsDetailId,omitempty"`
}

func (x *GoodsDetailRes) Reset() {
	*x = GoodsDetailRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsDetailRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsDetailRes) ProtoMessage() {}

func (x *GoodsDetailRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsDetailRes.ProtoReflect.Descriptor instead.
func (*GoodsDetailRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{36}
}

func (x *GoodsDetailRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GoodsDetailRes) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *GoodsDetailRes) GetBrandId() uint32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *GoodsDetailRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoodsDetailRes) GetGoodsSign() string {
	if x != nil {
		return x.GoodsSign
	}
	return ""
}

func (x *GoodsDetailRes) GetClickNum() int32 {
	if x != nil {
		return x.ClickNum
	}
	return 0
}

func (x *GoodsDetailRes) GetSoldNum() int32 {
	if x != nil {
		return x.SoldNum
	}
	return 0
}

func (x *GoodsDetailRes) GetFavorNum() int32 {
	if x != nil {
		return x.FavorNum
	}
	return 0
}

func (x *GoodsDetailRes) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

func (x *GoodsDetailRes) GetSalePrice() float32 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *GoodsDetailRes) GetGoodsBrief() string {
	if x != nil {
		return x.GoodsBrief
	}
	return ""
}

func (x *GoodsDetailRes) GetShipFree() bool {
	if x != nil {
		return x.ShipFree
	}
	return false
}

func (x *GoodsDetailRes) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *GoodsDetailRes) GetDescImages() []string {
	if x != nil {
		return x.DescImages
	}
	return nil
}

func (x *GoodsDetailRes) GetFirstImage() string {
	if x != nil {
		return x.FirstImage
	}
	return ""
}

func (x *GoodsDetailRes) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *GoodsDetailRes) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *GoodsDetailRes) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GoodsDetailRes) GetCategory() *CategoryBriefInfoRes {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *GoodsDetailRes) GetBrand() *BrandInfoRes {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *GoodsDetailRes) GetGoodsDetailId() uint32 {
	if x != nil {
		return x.GoodsDetailId
	}
	return 0
}

type GoodsListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  []*GoodsInfoRes `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GoodsListRes) Reset() {
	*x = GoodsListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goods_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsListRes) ProtoMessage() {}

func (x *GoodsListRes) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsListRes.ProtoReflect.Descriptor instead.
func (*GoodsListRes) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{37}
}

func (x *GoodsListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GoodsListRes) GetData() []*GoodsInfoRes {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_goods_proto protoreflect.FileDescriptor

var file_goods_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x77, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0f, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x91, 0x01,
	0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x20, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x12,
	0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x07, 0x73, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a,
	0x0a, 0x14, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x60, 0x0a, 0x14,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x25,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x5d, 0x0a,
	0x14, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x01, 0x0a,
	0x14, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4f, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x5f, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x5d,
	0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x34, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x48, 0x0a, 0x0e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x1e, 0x0a,
	0x0c, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x48, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x22, 0x46, 0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x4d, 0x0a, 0x0c, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0b, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0xda, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaa, 0x02,
	0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x0c, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69,
	0x70, 0x46, 0x72, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x69,
	0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x48, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x05, 0x0a, 0x0e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68,
	0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x52,
	0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0c,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xef, 0x5b, 0x0a, 0x05,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0xe7, 0x07, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x22, 0xab, 0x07, 0xca, 0xe4, 0x1d, 0x98, 0x07, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x39, 0x32, 0x30, 0x30,
	0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69,
	0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a,
	0x34, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20,
	0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x95,
	0x86, 0xe5, 0x93, 0x81, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x38, 0x6d, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0x8e, 0xe4, 0xbb, 0xb7,
	0xe6, 0xa0, 0xbc, 0x27, 0x52, 0x38, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc, 0x27, 0x52, 0x2b,
	0x69, 0x73, 0x48, 0x6f, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x62, 0x6f, 0x6f, 0x6c,
	0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0x83,
	0xad, 0xe9, 0x97, 0xa8, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0x27, 0x52, 0x25, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x20, 0x27, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x96, 0xb0, 0xe5, 0x93,
	0x81, 0x27, 0x52, 0x30, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27,
	0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x27, 0x52, 0x7e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe7, 0xb1,
	0xbb, 0xe5, 0x88, 0xab, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0x49, 0x44, 0x2c, 0xe7, 0xa1, 0xae,
	0xe5, 0xae, 0x9a, 0xe7, 0x82, 0xb9, 0xe5, 0x87, 0xbb, 0xe7, 0x9a, 0x84, 0xe7, 0x9b, 0xae, 0xe5,
	0xbd, 0x95, 0xe6, 0x98, 0xaf, 0xe5, 0x93, 0xaa, 0xe4, 0xb8, 0x80, 0xe7, 0xba, 0xa7, 0x2c, 0xe4,
	0xbc, 0x9a, 0xe9, 0x80, 0x92, 0xe5, 0xbd, 0x92, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe4, 0xb8,
	0x8b, 0xe4, 0xb8, 0x80, 0xe5, 0xb1, 0x82, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe7, 0x9b, 0xae,
	0xe5, 0xbd, 0x95, 0x27, 0x52, 0x3e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb5,
	0xe5, 0x8f, 0xb7, 0x27, 0x52, 0x41, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb5,
	0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x27, 0x52, 0x2d, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe5, 0x85, 0xb3, 0xe9,
	0x94, 0xae, 0xe8, 0xaf, 0x8d, 0x27, 0x52, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x20,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x93, 0x81,
	0xe7, 0x89, 0x8c, 0x49, 0x44, 0x27, 0x52, 0x29, 0x69, 0x64, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27,
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0x49, 0x44,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0xc9, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x8b, 0x03,
	0xca, 0xe4, 0x1d, 0xf4, 0x02, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x39, 0x32, 0x30,
	0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e,
	0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22,
	0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x5a, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0x69, 0x64, 0xe6, 0x95, 0xb0, 0xe7, 0xbb,
	0x84, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xb0, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x95, 0x86,
	0xe5, 0x93, 0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x2c, 0xe5, 0xb8, 0xb8, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe4, 0xbb, 0x8e, 0xe8, 0xae, 0xa2, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xad, 0xe8,
	0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x30, 0x69, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x20, 0x5b, 0x5d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x5b, 0x5d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29,
	0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0x49, 0x44, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12,
	0x0a, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2f, 0x69, 0x64, 0x73, 0x12, 0xa0, 0x03, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x13,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x22, 0xe1, 0x02, 0xca, 0xe4, 0x1d,
	0xc2, 0x02, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x2f, 0x66, 0x6f,
	0x72, 0x6d, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x3b, 0x32, 0x30, 0x30, 0x20, 0x7b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69,
	0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a,
	0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x2f, 0xe9, 0x80, 0x9a, 0xe8,
	0xbf, 0x87, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0x69, 0x64, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe5, 0xaf, 0xb9, 0xe5, 0xba, 0x94, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9a, 0x84, 0xe8,
	0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x27, 0x69, 0x64, 0x20,
	0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0x49, 0x44, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc5,
	0x06, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x15,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x22, 0x87, 0x06, 0xca,
	0xe4, 0x1d, 0xf4, 0x05, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x3b, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c,
	0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34,
	0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0x52, 0x35, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x69, 0x64, 0x27, 0x52, 0x32, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x20, 0x62, 0x6f,
	0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20,
	0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5,
	0x93, 0x81, 0xe7, 0x89, 0x8c, 0x69, 0x64, 0x27, 0x52, 0x21, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62,
	0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20,
	0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0x90, 0x8d, 0x27, 0x52, 0x3a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0x8e, 0x9f, 0xe5, 0xa7, 0x8b,
	0xe5, 0x94, 0xae, 0xe4, 0xbb, 0xb7, 0x27, 0x52, 0x38, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95,
	0x86, 0xe5, 0x93, 0x81, 0xe5, 0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe5, 0x94, 0xae, 0xe4, 0xbb, 0xb7,
	0x27, 0x52, 0x30, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65, 0x66, 0x20, 0x62, 0x6f,
	0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27,
	0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0xae, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbb, 0x8b, 0xe7,
	0xbb, 0x8d, 0x27, 0x52, 0x30, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x20, 0x62, 0x6f,
	0x64, 0x79, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x29, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x8d, 0xe8, 0xbf,
	0x90, 0xe8, 0xb4, 0xb9, 0x27, 0x52, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x20, 0x62, 0x6f,
	0x64, 0x79, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0x9b,
	0xbe, 0xe7, 0x89, 0x87, 0x27, 0x52, 0x35, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x6f, 0x72,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5,
	0x93, 0x81, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x9b, 0xbe, 0x27, 0x52, 0x2a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x22, 0x06,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0xff, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0xc3, 0x02, 0xca, 0xe4, 0x1d, 0xab, 0x02, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30,
	0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x22, 0x2a, 0x34, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30,
	0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0x52, 0x27, 0x69, 0x64,
	0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5,
	0x93, 0x81, 0x69, 0x64, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xca, 0x07, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8a, 0x07, 0xca, 0xe4, 0x1d, 0xf2, 0x06,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30,
	0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x42, 0x18, 0xe5, 0xb1, 0x80, 0xe9, 0x83, 0xa8, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8,
	0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0x52, 0x27, 0x69, 0x64, 0x20, 0x70,
	0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81,
	0x69, 0x64, 0x27, 0x52, 0x36, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x20,
	0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5,
	0x93, 0x81, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x69, 0x64, 0x27, 0x52, 0x33, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0x69, 0x64, 0x27,
	0x52, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81,
	0xe5, 0x90, 0x8d, 0x27, 0x52, 0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95,
	0x86, 0xe5, 0x93, 0x81, 0xe5, 0x8e, 0x9f, 0xe5, 0xa7, 0x8b, 0xe5, 0x94, 0xae, 0xe4, 0xbb, 0xb7,
	0x27, 0x52, 0x39, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x62, 0x6f, 0x64,
	0x79, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27,
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5,
	0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe5, 0x94, 0xae, 0xe4, 0xbb, 0xb7, 0x27, 0x52, 0x31, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x42, 0x72, 0x69, 0x65, 0x66, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5,
	0x93, 0x81, 0xe7, 0xae, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0x27, 0x52,
	0x31, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x62,
	0x6f, 0x6f, 0x6c, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x29, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x8d, 0xe8, 0xbf, 0x90, 0xe8, 0xb4,
	0xb9, 0x27, 0x52, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0x9b, 0xbe, 0xe7,
	0x89, 0x87, 0x27, 0x52, 0x36, 0x64, 0x65, 0x73, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x20,
	0x62, 0x6f, 0x64, 0x79, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x6f, 0x72, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x9b, 0xbe, 0x27, 0x52, 0x2b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93,
	0x81, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0x27, 0x52, 0x28, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x32, 0x0b, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xca, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x86, 0x02, 0xca, 0xe4, 0x1d, 0xee,
	0x01, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x1a, 0x3c, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35,
	0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x95, 0x86,
	0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0xc1, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0xfb, 0x02, 0xca, 0xe4, 0x1d, 0xe0, 0x02,
	0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x1a, 0x3f, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22,
	0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34,
	0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x27, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5,
	0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x8f, 0x8a, 0xe5, 0x85,
	0xb6, 0xe5, 0xad, 0x90, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x2d, 0x69, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29,
	0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0x49, 0x44, 0x27, 0x52,
	0x2f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x29, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0xb1, 0x82, 0xe7, 0xba, 0xa7, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xf3, 0x03, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0xae, 0x03, 0xca, 0xe4,
	0x1d, 0x96, 0x03, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x3c, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c,
	0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34,
	0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae,
	0xe5, 0xbd, 0x95, 0x52, 0x2a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5,
	0x93, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x27, 0x52,
	0x39, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe7, 0x88,
	0xb6, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0x49, 0x44, 0x27, 0x52, 0x2d, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe7, 0x9b, 0xae, 0xe5,
	0xbd, 0x95, 0xe5, 0xb1, 0x82, 0xe7, 0xba, 0xa7, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22,
	0x0b, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0xe8, 0x02, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa6,
	0x02, 0xca, 0xe4, 0x1d, 0x8b, 0x02, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30,
	0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x18, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae, 0xe5,
	0xbd, 0x95, 0x52, 0x2d, 0x69, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x29, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0x49, 0x44,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc1, 0x04, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xfc, 0x03, 0xca,
	0xe4, 0x1d, 0xe1, 0x03, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30,
	0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x80, 0xe4,
	0xb8, 0xaa, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0x52, 0x2d,
	0x69, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x95,
	0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0x49, 0x44, 0x27, 0x52, 0x2b, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe7, 0x9b, 0xae,
	0xe5, 0xbd, 0x95, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x27, 0x52, 0x39, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x20, 0x62, 0x6f, 0x64,
	0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20,
	0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe7, 0x88, 0xb6, 0xe7, 0x9b, 0xae, 0xe5,
	0xbd, 0x95, 0x49, 0x44, 0x27, 0x52, 0x2e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x62, 0x6f, 0x64,
	0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20,
	0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0xb1,
	0x82, 0xe7, 0xba, 0xa7, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x32, 0x0e, 0x2f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb9, 0x03, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0xfc, 0x02, 0xca, 0xe4, 0x1d, 0xe8, 0x02,
	0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x1a, 0x39, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34,
	0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c,
	0x7d, 0x42, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x3e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x20,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0x9a, 0x84, 0xe9, 0xa1,
	0xb5, 0xe5, 0x8f, 0xb7, 0x27, 0x52, 0x41, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0x9a, 0x84, 0xe9, 0xa1,
	0xb5, 0xe5, 0xa4, 0xa7, 0xe5, 0xb0, 0x8f, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07,
	0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x90, 0x03, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x22, 0xd4, 0x02, 0xca, 0xe4, 0x1d, 0xc1, 0x02, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a,
	0x39, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20,
	0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69,
	0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x12,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x93, 0x81, 0xe7,
	0x89, 0x8c, 0x52, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0xe5, 0x93, 0x81, 0xe7, 0x89,
	0x8c, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x27, 0x52, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x20, 0x62,
	0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20,
	0x27, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0x4c, 0x6f, 0x67, 0x6f, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x08, 0x22, 0x06, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0xfa, 0x02, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xbe, 0x02, 0xca, 0xe4, 0x1d, 0xa6, 0x02, 0x12, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30,
	0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x42, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x93,
	0x81, 0xe7, 0x89, 0x8c, 0x52, 0x27, 0x69, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x29, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0x49, 0x44, 0x27, 0x52, 0x25, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe0, 0x03, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa1, 0x03, 0xca, 0xe4, 0x1d, 0x89, 0x03, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a,
	0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20,
	0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69,
	0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x12,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x93, 0x81, 0xe7,
	0x89, 0x8c, 0x52, 0x27, 0x69, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x29, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0x49, 0x44, 0x27, 0x52, 0x25, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x27, 0x52, 0x23, 0x6c, 0x6f, 0x67, 0x6f, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0xe5, 0x93, 0x81, 0xe7,
	0x89, 0x8c, 0x4c, 0x6f, 0x67, 0x6f, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x32, 0x0b, 0x2f,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xbe, 0x02, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0xfe, 0x01, 0xca, 0xe4, 0x1d,
	0xe9, 0x01, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x3a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x7d,
	0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30,
	0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x15, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0xbd, 0xae, 0xe6,
	0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0a, 0x12, 0x08, 0x2f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0xd9, 0x03, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x9a, 0x03, 0xca, 0xe4, 0x1d,
	0x85, 0x03, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x3a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a,
	0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30, 0x20,
	0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x15, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xb8,
	0x80, 0xe4, 0xb8, 0xaa, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0x52, 0x30, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8,
	0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0x27, 0x52,
	0x2b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5,
	0x9b, 0xbe, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x55, 0x52, 0x4c, 0x27, 0x52, 0x29, 0x75, 0x72,
	0x6c, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x20, 0x27, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe8, 0xb7, 0xb3,
	0xe8, 0xbd, 0xac, 0x55, 0x52, 0x4c, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x22, 0x08, 0x2f,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x90, 0x03, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xd2, 0x02, 0xca, 0xe4, 0x1d, 0xb9, 0x02, 0x12, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a,
	0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31,
	0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e,
	0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42,
	0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe8, 0xbd, 0xae,
	0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0x52, 0x2a, 0x69, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0x49,
	0x44, 0x27, 0x52, 0x32, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe7,
	0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x2a, 0x0c, 0x2f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xaa, 0x04, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xe9, 0x03, 0xca, 0xe4,
	0x1d, 0xd0, 0x03, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e,
	0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22,
	0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30,
	0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e,
	0x69, 0x6c, 0x7d, 0x42, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x80, 0xe4, 0xb8,
	0xaa, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0x52, 0x2a, 0x69, 0x64, 0x20, 0x70,
	0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad,
	0xe5, 0x9b, 0xbe, 0x49, 0x44, 0x27, 0x52, 0x31, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x62, 0x6f,
	0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x20, 0x27, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5,
	0x9b, 0xbe, 0xe5, 0xba, 0x8f, 0xe5, 0x8f, 0xb7, 0x27, 0x52, 0x2c, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x20, 0x27, 0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe5, 0x9b, 0xbe,
	0xe7, 0x89, 0x87, 0x55, 0x52, 0x4c, 0x27, 0x52, 0x2a, 0x75, 0x72, 0x6c, 0x20, 0x62, 0x6f, 0x64,
	0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27,
	0xe8, 0xbd, 0xae, 0xe6, 0x92, 0xad, 0xe5, 0x9b, 0xbe, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0x55,
	0x52, 0x4c, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x32, 0x0c, 0x2f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xf0, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x9b, 0x03, 0xca,
	0xe4, 0x1d, 0xff, 0x02, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x41, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x31, 0x20, 0x7b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c,
	0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x21, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0xe4, 0xb8, 0x8e, 0xe7, 0x9b,
	0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x3e, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27,
	0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb5, 0xe5, 0x8f, 0xb7, 0x27,
	0x52, 0x41, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27,
	0x28, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe9, 0x9b, 0x86, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb5, 0xe5, 0xa4, 0xa7, 0xe5,
	0xb0, 0x8f, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0xdd, 0x03, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x22, 0x89,
	0x03, 0xca, 0xe4, 0x1d, 0xed, 0x02, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x41, 0x32, 0x30, 0x30, 0x20,
	0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x3d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x7d, 0x22, 0x2a, 0x34,
	0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c,
	0x7d, 0x42, 0x21, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5,
	0x93, 0x81, 0xe7, 0x89, 0x8c, 0xe4, 0xb8, 0x8e, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0x52, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe7, 0x9b, 0xae, 0xe5,
	0xbd, 0x95, 0x49, 0x44, 0x27, 0x52, 0x2c, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x20, 0x62,
	0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x29, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c,
	0x49, 0x44, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0f, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0xfa, 0x02, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xae, 0x02, 0xca, 0xe4, 0x1d, 0x8e, 0x02, 0x12, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30,
	0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75,
	0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20, 0x7b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d,
	0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d,
	0x42, 0x21, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x93,
	0x81, 0xe7, 0x89, 0x8c, 0xe4, 0xb8, 0x8e, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0x52, 0x27, 0x69, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x29, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0x49, 0x44, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x2a, 0x13, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9c, 0x04, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xcd, 0x03, 0xca, 0xe4, 0x1d, 0xad, 0x03, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x12, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x1a, 0x2a, 0x32, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a,
	0x34, 0x30, 0x31, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x35, 0x30, 0x30, 0x20,
	0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69,
	0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x30, 0x20, 0x7b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69,
	0x6c, 0x7d, 0x22, 0x2a, 0x34, 0x30, 0x34, 0x20, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x6e, 0x69, 0x6c, 0x7d, 0x42, 0x21,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe5, 0x93, 0x81, 0xe7,
	0x89, 0x8c, 0xe4, 0xb8, 0x8e, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0x52, 0x27, 0x69, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x29, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0x49, 0x44, 0x27, 0x52, 0x30, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x29, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0x49, 0x44, 0x27, 0x52, 0x2d, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x27, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x29, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c, 0x49, 0x44, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x32, 0x13, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x45, 0xc2, 0xe4, 0x1d, 0x41, 0x0a, 0x11, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x12,
	0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x1a, 0x1c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x20, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x41, 0x50, 0x49, 0x22, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x2a, 0x01, 0x2f, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_goods_proto_rawDescOnce sync.Once
	file_goods_proto_rawDescData = file_goods_proto_rawDesc
)

func file_goods_proto_rawDescGZIP() []byte {
	file_goods_proto_rawDescOnce.Do(func() {
		file_goods_proto_rawDescData = protoimpl.X.CompressGZIP(file_goods_proto_rawDescData)
	})
	return file_goods_proto_rawDescData
}

var file_goods_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_goods_proto_goTypes = []interface{}{
	(*CategoryListRes)(nil),        // 0: goods.CategoryListRes
	(*CategoryInfoReq)(nil),        // 1: goods.CategoryInfoReq
	(*CreateCategoryReq)(nil),      // 2: goods.CreateCategoryReq
	(*UpdateCategoryReq)(nil),      // 3: goods.UpdateCategoryReq
	(*CategoryInfoRes)(nil),        // 4: goods.CategoryInfoRes
	(*DelCategoryReq)(nil),         // 5: goods.DelCategoryReq
	(*SubCategoryReq)(nil),         // 6: goods.SubCategoryReq
	(*SubCategoryListRes)(nil),     // 7: goods.SubCategoryListRes
	(*CategoryBriefInfoRes)(nil),   // 8: goods.CategoryBriefInfoRes
	(*CategoryBrandFilterReq)(nil), // 9: goods.CategoryBrandFilterReq
	(*CategoryBrandInfoReq)(nil),   // 10: goods.CategoryBrandInfoReq
	(*DelCategoryBrandReq)(nil),    // 11: goods.DelCategoryBrandReq
	(*CreateCategoryBrandReq)(nil), // 12: goods.CreateCategoryBrandReq
	(*UpdateCategoryBrandReq)(nil), // 13: goods.UpdateCategoryBrandReq
	(*CategoryBrandListRes)(nil),   // 14: goods.CategoryBrandListRes
	(*CategoryBrandInfoRes)(nil),   // 15: goods.CategoryBrandInfoRes
	(*BannerListRes)(nil),          // 16: goods.BannerListRes
	(*BannerInfoReq)(nil),          // 17: goods.BannerInfoReq
	(*CreateBannerReq)(nil),        // 18: goods.CreateBannerReq
	(*UpdateBannerReq)(nil),        // 19: goods.UpdateBannerReq
	(*BannerInfoRes)(nil),          // 20: goods.BannerInfoRes
	(*DelBannerReq)(nil),           // 21: goods.DelBannerReq
	(*BrandFilterReq)(nil),         // 22: goods.BrandFilterReq
	(*BrandInfoReq)(nil),           // 23: goods.BrandInfoReq
	(*CreateBrandReq)(nil),         // 24: goods.CreateBrandReq
	(*UpdateBrandReq)(nil),         // 25: goods.UpdateBrandReq
	(*BrandInfoRes)(nil),           // 26: goods.BrandInfoRes
	(*BrandListRes)(nil),           // 27: goods.BrandListRes
	(*DelBrandReq)(nil),            // 28: goods.DelBrandReq
	(*DelGoodsReq)(nil),            // 29: goods.DelGoodsReq
	(*GoodsInfoReq)(nil),           // 30: goods.GoodsInfoReq
	(*GoodsIdsReq)(nil),            // 31: goods.GoodsIdsReq
	(*CreateGoodsReq)(nil),         // 32: goods.CreateGoodsReq
	(*UpdateGoodsReq)(nil),         // 33: goods.UpdateGoodsReq
	(*GoodsFilterReq)(nil),         // 34: goods.GoodsFilterReq
	(*GoodsInfoRes)(nil),           // 35: goods.GoodsInfoRes
	(*GoodsDetailRes)(nil),         // 36: goods.GoodsDetailRes
	(*GoodsListRes)(nil),           // 37: goods.GoodsListRes
	(*emptypb.Empty)(nil),          // 38: google.protobuf.Empty
}
var file_goods_proto_depIdxs = []int32{
	4,  // 0: goods.CategoryListRes.data:type_name -> goods.CategoryInfoRes
	4,  // 1: goods.SubCategoryListRes.selfInfo:type_name -> goods.CategoryInfoRes
	4,  // 2: goods.SubCategoryListRes.subInfo:type_name -> goods.CategoryInfoRes
	15, // 3: goods.CategoryBrandListRes.data:type_name -> goods.CategoryBrandInfoRes
	26, // 4: goods.CategoryBrandInfoRes.brandInfo:type_name -> goods.BrandInfoRes
	4,  // 5: goods.CategoryBrandInfoRes.categoryInfo:type_name -> goods.CategoryInfoRes
	20, // 6: goods.BannerListRes.data:type_name -> goods.BannerInfoRes
	26, // 7: goods.BrandListRes.data:type_name -> goods.BrandInfoRes
	8,  // 8: goods.GoodsDetailRes.category:type_name -> goods.CategoryBriefInfoRes
	26, // 9: goods.GoodsDetailRes.brand:type_name -> goods.BrandInfoRes
	35, // 10: goods.GoodsListRes.data:type_name -> goods.GoodsInfoRes
	34, // 11: goods.Goods.GetGoodList:input_type -> goods.GoodsFilterReq
	31, // 12: goods.Goods.GetGoodsListById:input_type -> goods.GoodsIdsReq
	30, // 13: goods.Goods.GetGoodsDetail:input_type -> goods.GoodsInfoReq
	32, // 14: goods.Goods.CreateGoods:input_type -> goods.CreateGoodsReq
	29, // 15: goods.Goods.DeleteGoods:input_type -> goods.DelGoodsReq
	33, // 16: goods.Goods.UpdeateGoods:input_type -> goods.UpdateGoodsReq
	38, // 17: goods.Goods.GetCategoryList:input_type -> google.protobuf.Empty
	6,  // 18: goods.Goods.GetCategoryInfo:input_type -> goods.SubCategoryReq
	2,  // 19: goods.Goods.CreateCategory:input_type -> goods.CreateCategoryReq
	5,  // 20: goods.Goods.DeleteCategory:input_type -> goods.DelCategoryReq
	3,  // 21: goods.Goods.UpdateCategory:input_type -> goods.UpdateCategoryReq
	22, // 22: goods.Goods.GetBrandList:input_type -> goods.BrandFilterReq
	24, // 23: goods.Goods.CreateBrand:input_type -> goods.CreateBrandReq
	28, // 24: goods.Goods.DeleteBrand:input_type -> goods.DelBrandReq
	25, // 25: goods.Goods.UpdateBrand:input_type -> goods.UpdateBrandReq
	38, // 26: goods.Goods.GetBannerList:input_type -> google.protobuf.Empty
	18, // 27: goods.Goods.CreateBanner:input_type -> goods.CreateBannerReq
	21, // 28: goods.Goods.DeleteBanner:input_type -> goods.DelBannerReq
	19, // 29: goods.Goods.UpdateBanner:input_type -> goods.UpdateBannerReq
	9,  // 30: goods.Goods.GetCategoryBrandList:input_type -> goods.CategoryBrandFilterReq
	12, // 31: goods.Goods.CreateCategoryBrand:input_type -> goods.CreateCategoryBrandReq
	11, // 32: goods.Goods.DeleteCategoryBrand:input_type -> goods.DelCategoryBrandReq
	13, // 33: goods.Goods.UpdateCategoryBrand:input_type -> goods.UpdateCategoryBrandReq
	37, // 34: goods.Goods.GetGoodList:output_type -> goods.GoodsListRes
	37, // 35: goods.Goods.GetGoodsListById:output_type -> goods.GoodsListRes
	36, // 36: goods.Goods.GetGoodsDetail:output_type -> goods.GoodsDetailRes
	36, // 37: goods.Goods.CreateGoods:output_type -> goods.GoodsDetailRes
	38, // 38: goods.Goods.DeleteGoods:output_type -> google.protobuf.Empty
	38, // 39: goods.Goods.UpdeateGoods:output_type -> google.protobuf.Empty
	0,  // 40: goods.Goods.GetCategoryList:output_type -> goods.CategoryListRes
	7,  // 41: goods.Goods.GetCategoryInfo:output_type -> goods.SubCategoryListRes
	4,  // 42: goods.Goods.CreateCategory:output_type -> goods.CategoryInfoRes
	38, // 43: goods.Goods.DeleteCategory:output_type -> google.protobuf.Empty
	38, // 44: goods.Goods.UpdateCategory:output_type -> google.protobuf.Empty
	27, // 45: goods.Goods.GetBrandList:output_type -> goods.BrandListRes
	26, // 46: goods.Goods.CreateBrand:output_type -> goods.BrandInfoRes
	38, // 47: goods.Goods.DeleteBrand:output_type -> google.protobuf.Empty
	38, // 48: goods.Goods.UpdateBrand:output_type -> google.protobuf.Empty
	16, // 49: goods.Goods.GetBannerList:output_type -> goods.BannerListRes
	20, // 50: goods.Goods.CreateBanner:output_type -> goods.BannerInfoRes
	38, // 51: goods.Goods.DeleteBanner:output_type -> google.protobuf.Empty
	38, // 52: goods.Goods.UpdateBanner:output_type -> google.protobuf.Empty
	14, // 53: goods.Goods.GetCategoryBrandList:output_type -> goods.CategoryBrandListRes
	15, // 54: goods.Goods.CreateCategoryBrand:output_type -> goods.CategoryBrandInfoRes
	38, // 55: goods.Goods.DeleteCategoryBrand:output_type -> google.protobuf.Empty
	38, // 56: goods.Goods.UpdateCategoryBrand:output_type -> google.protobuf.Empty
	34, // [34:57] is the sub-list for method output_type
	11, // [11:34] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_goods_proto_init() }
func file_goods_proto_init() {
	if File_goods_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goods_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCategoryListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBriefInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBrandFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBrandInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCategoryBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCategoryBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategoryBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBrandListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBrandInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelGoodsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsDetailRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goods_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goods_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_goods_proto_goTypes,
		DependencyIndexes: file_goods_proto_depIdxs,
		MessageInfos:      file_goods_proto_msgTypes,
	}.Build()
	File_goods_proto = out.File
	file_goods_proto_rawDesc = nil
	file_goods_proto_goTypes = nil
	file_goods_proto_depIdxs = nil
}
