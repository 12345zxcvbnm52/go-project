package generator

import (
	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const (
	ginPkg     = protogen.GoImportPath("github.com/gin-gonic/gin")
	stringsPkg = protogen.GoImportPath("strings")
	smptyPkg   = protogen.GoImportPath("google.golang.org/protobuf/types/known/emptypb")
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	//设置生成的文件名,文件名会被protoc使用,生成的文件会被放在响应的目录下
	filename := file.GeneratedFilenamePrefix + "_gin.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	//该注释会被go的ide识别到, 表示该文件是自动生成的,尽量不要修改
	g.P("// Code generated by protoc-gen-gin. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)

	//该函数是注册全局的packge的内容,但是此时不会写入
	g.QualifiedGoIdent(ginPkg.Ident(""))
	g.QualifiedGoIdent(stringsPkg.Ident(""))
	data := ""
	for _, service := range file.Services {
		data += genService(file, g, service)
	}

	//自己写文件看结果
	//f, err := os.Create("api_gin.pb.go")
	//
	//if err != nil {
	//	log.Fatal(err)
	//}
	//
	//defer f.Close()
	//
	//contentStr, _ := g.Content()
	//_, _ = f.WriteString(string(contentStr))
	g.P(data)
	return g
}

func genService(_ *protogen.File, _ *protogen.GeneratedFile, s *protogen.Service) string {
	// HTTP Server
	sd := &service{
		Name:           s.GoName,
		FullName:       string(s.Desc.FullName()),
		ServiceComment: s.Comments.Leading.String(),
	}

	for _, method := range s.Methods {
		s := genMethod(method)
		if s.MethodComment[len(s.MethodComment)-1] == '\n' {
			s.MethodComment = s.MethodComment[:len(s.MethodComment)-1]
		}
		sd.Methods = append(sd.Methods, s)
	}

	return sd.execute()
}

func genMethod(m *protogen.Method) *method {
	var methods *method
	//mtdOption:=m.Desc.Options()
	rule, ok := proto.GetExtension(m.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
	if rule != nil && ok {

		//for _, bind := range rule.AdditionalBindings {
		//	methods = append(methods, buildHTTPRule(m, bind))
		//}

		methods = buildHTTPRule(m, rule)
		return methods
	}

	methods = defaultMethod(m)
	return methods
}

func defaultMethod(m *protogen.Method) *method {
	// TODO path
	// $prefix + / + ${package}.${service} + / + ${method}
	// /api/demo.v0.Demo/GetName
	md := buildMethodDesc(m, "GET", "/"+"default/"+m.GoName)
	md.Body = "*"
	return md
}

func buildHTTPRule(m *protogen.Method, rule *annotations.HttpRule) *method {
	var path, method string
	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = "GET"
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = "PUT"
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = "POST"
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = "DELETE"
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = "PATCH"
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}

	md := buildMethodDesc(m, method, path)
	return md
}

func buildMethodDesc(m *protogen.Method, httpMethod string, path string) *method {
	//defer func() { methodSets[m.GoName]++ }()

	md := &method{
		MethodComment: m.Comments.Leading.String(),
		HandlerName:   m.GoName,
		//Num:     methodSets[m.GoName],
		RequestType: m.Input.GoIdent.GoName,
		ReplyType:   m.Output.GoIdent.GoName,
		Path:        path,
		Method:      httpMethod,
	}

	md.initPathParams()
	return md
}
