// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsClient interface {
	// 商品服务
	GetGoodList(ctx context.Context, in *GoodsFilterReq, opts ...grpc.CallOption) (*GoodsListRes, error)
	// 用于通过id数组得到所有商品信息,常用于从订单中获得所有商品信息,
	GetGoodsListById(ctx context.Context, in *BatchGoodsByIdReq, opts ...grpc.CallOption) (*GoodsListRes, error)
	// 增删改
	CreateGoods(ctx context.Context, in *WriteGoodsInfoReq, opts ...grpc.CallOption) (*GoodsInfoRes, error)
	DeleteGoods(ctx context.Context, in *DelGoodsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdeateGoods(ctx context.Context, in *WriteGoodsInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGoodsDetail(ctx context.Context, in *GoodsInfoReq, opts ...grpc.CallOption) (*GoodsInfoRes, error)
	// 商品类型服务
	GetAllCategyList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategyListRes, error)
	GetSubCategy(ctx context.Context, in *SubCategyReq, opts ...grpc.CallOption) (*SubCategyListRes, error)
	CreateCategy(ctx context.Context, in *CategyInfoReq, opts ...grpc.CallOption) (*CategyInfoRes, error)
	DeleteCategy(ctx context.Context, in *DelCategyReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCategy(ctx context.Context, in *CategyInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 品牌服务
	GetBrandList(ctx context.Context, in *BrandFilterReq, opts ...grpc.CallOption) (*BrandListRes, error)
	CreateBrand(ctx context.Context, in *BrandInfoReq, opts ...grpc.CallOption) (*BrandInfoRes, error)
	DeleteBrand(ctx context.Context, in *DelBrandReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBrand(ctx context.Context, in *BrandInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 轮播窗口服务
	GetBannerList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BannerListRes, error)
	CreateBanner(ctx context.Context, in *BannerInfoReq, opts ...grpc.CallOption) (*BannerInfoRes, error)
	DeleteBanner(ctx context.Context, in *DelBrandReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBanner(ctx context.Context, in *BannerInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 品牌分类服务
	GetCategyBrandList(ctx context.Context, in *CategyBrandFilterReq, opts ...grpc.CallOption) (*CategyBrandListRes, error)
	// 通过一个类型获得所有有这个类型的品牌
	GetBrandListByCategy(ctx context.Context, in *CategyInfoReq, opts ...grpc.CallOption) (*BrandListRes, error)
	CreateCategyBrand(ctx context.Context, in *CategyBrandInfoReq, opts ...grpc.CallOption) (*CategyBrandInfoRes, error)
	DeleteCategyBrand(ctx context.Context, in *CategyBrandInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCategyBrand(ctx context.Context, in *CategyBrandInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type goodsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsClient(cc grpc.ClientConnInterface) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) GetGoodList(ctx context.Context, in *GoodsFilterReq, opts ...grpc.CallOption) (*GoodsListRes, error) {
	out := new(GoodsListRes)
	err := c.cc.Invoke(ctx, "/Goods/GetGoodList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsListById(ctx context.Context, in *BatchGoodsByIdReq, opts ...grpc.CallOption) (*GoodsListRes, error) {
	out := new(GoodsListRes)
	err := c.cc.Invoke(ctx, "/Goods/GetGoodsListById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateGoods(ctx context.Context, in *WriteGoodsInfoReq, opts ...grpc.CallOption) (*GoodsInfoRes, error) {
	out := new(GoodsInfoRes)
	err := c.cc.Invoke(ctx, "/Goods/CreateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeleteGoods(ctx context.Context, in *DelGoodsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/DeleteGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdeateGoods(ctx context.Context, in *WriteGoodsInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/UpdeateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsDetail(ctx context.Context, in *GoodsInfoReq, opts ...grpc.CallOption) (*GoodsInfoRes, error) {
	out := new(GoodsInfoRes)
	err := c.cc.Invoke(ctx, "/Goods/GetGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetAllCategyList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategyListRes, error) {
	out := new(CategyListRes)
	err := c.cc.Invoke(ctx, "/Goods/GetAllCategyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetSubCategy(ctx context.Context, in *SubCategyReq, opts ...grpc.CallOption) (*SubCategyListRes, error) {
	out := new(SubCategyListRes)
	err := c.cc.Invoke(ctx, "/Goods/GetSubCategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateCategy(ctx context.Context, in *CategyInfoReq, opts ...grpc.CallOption) (*CategyInfoRes, error) {
	out := new(CategyInfoRes)
	err := c.cc.Invoke(ctx, "/Goods/CreateCategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeleteCategy(ctx context.Context, in *DelCategyReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/DeleteCategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateCategy(ctx context.Context, in *CategyInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/UpdateCategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetBrandList(ctx context.Context, in *BrandFilterReq, opts ...grpc.CallOption) (*BrandListRes, error) {
	out := new(BrandListRes)
	err := c.cc.Invoke(ctx, "/Goods/GetBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateBrand(ctx context.Context, in *BrandInfoReq, opts ...grpc.CallOption) (*BrandInfoRes, error) {
	out := new(BrandInfoRes)
	err := c.cc.Invoke(ctx, "/Goods/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeleteBrand(ctx context.Context, in *DelBrandReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/DeleteBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateBrand(ctx context.Context, in *BrandInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetBannerList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BannerListRes, error) {
	out := new(BannerListRes)
	err := c.cc.Invoke(ctx, "/Goods/GetBannerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateBanner(ctx context.Context, in *BannerInfoReq, opts ...grpc.CallOption) (*BannerInfoRes, error) {
	out := new(BannerInfoRes)
	err := c.cc.Invoke(ctx, "/Goods/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeleteBanner(ctx context.Context, in *DelBrandReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/DeleteBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateBanner(ctx context.Context, in *BannerInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/UpdateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetCategyBrandList(ctx context.Context, in *CategyBrandFilterReq, opts ...grpc.CallOption) (*CategyBrandListRes, error) {
	out := new(CategyBrandListRes)
	err := c.cc.Invoke(ctx, "/Goods/GetCategyBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetBrandListByCategy(ctx context.Context, in *CategyInfoReq, opts ...grpc.CallOption) (*BrandListRes, error) {
	out := new(BrandListRes)
	err := c.cc.Invoke(ctx, "/Goods/GetBrandListByCategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateCategyBrand(ctx context.Context, in *CategyBrandInfoReq, opts ...grpc.CallOption) (*CategyBrandInfoRes, error) {
	out := new(CategyBrandInfoRes)
	err := c.cc.Invoke(ctx, "/Goods/CreateCategyBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) DeleteCategyBrand(ctx context.Context, in *CategyBrandInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/DeleteCategyBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateCategyBrand(ctx context.Context, in *CategyBrandInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Goods/UpdateCategyBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
// All implementations must embed UnimplementedGoodsServer
// for forward compatibility
type GoodsServer interface {
	// 商品服务
	GetGoodList(context.Context, *GoodsFilterReq) (*GoodsListRes, error)
	// 用于通过id数组得到所有商品信息,常用于从订单中获得所有商品信息,
	GetGoodsListById(context.Context, *BatchGoodsByIdReq) (*GoodsListRes, error)
	// 增删改
	CreateGoods(context.Context, *WriteGoodsInfoReq) (*GoodsInfoRes, error)
	DeleteGoods(context.Context, *DelGoodsReq) (*emptypb.Empty, error)
	UpdeateGoods(context.Context, *WriteGoodsInfoReq) (*emptypb.Empty, error)
	GetGoodsDetail(context.Context, *GoodsInfoReq) (*GoodsInfoRes, error)
	// 商品类型服务
	GetAllCategyList(context.Context, *emptypb.Empty) (*CategyListRes, error)
	GetSubCategy(context.Context, *SubCategyReq) (*SubCategyListRes, error)
	CreateCategy(context.Context, *CategyInfoReq) (*CategyInfoRes, error)
	DeleteCategy(context.Context, *DelCategyReq) (*emptypb.Empty, error)
	UpdateCategy(context.Context, *CategyInfoReq) (*emptypb.Empty, error)
	// 品牌服务
	GetBrandList(context.Context, *BrandFilterReq) (*BrandListRes, error)
	CreateBrand(context.Context, *BrandInfoReq) (*BrandInfoRes, error)
	DeleteBrand(context.Context, *DelBrandReq) (*emptypb.Empty, error)
	UpdateBrand(context.Context, *BrandInfoReq) (*emptypb.Empty, error)
	// 轮播窗口服务
	GetBannerList(context.Context, *emptypb.Empty) (*BannerListRes, error)
	CreateBanner(context.Context, *BannerInfoReq) (*BannerInfoRes, error)
	DeleteBanner(context.Context, *DelBrandReq) (*emptypb.Empty, error)
	UpdateBanner(context.Context, *BannerInfoReq) (*emptypb.Empty, error)
	// 品牌分类服务
	GetCategyBrandList(context.Context, *CategyBrandFilterReq) (*CategyBrandListRes, error)
	// 通过一个类型获得所有有这个类型的品牌
	GetBrandListByCategy(context.Context, *CategyInfoReq) (*BrandListRes, error)
	CreateCategyBrand(context.Context, *CategyBrandInfoReq) (*CategyBrandInfoRes, error)
	DeleteCategyBrand(context.Context, *CategyBrandInfoReq) (*emptypb.Empty, error)
	UpdateCategyBrand(context.Context, *CategyBrandInfoReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedGoodsServer()
}

// UnimplementedGoodsServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (UnimplementedGoodsServer) GetGoodList(context.Context, *GoodsFilterReq) (*GoodsListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodList not implemented")
}
func (UnimplementedGoodsServer) GetGoodsListById(context.Context, *BatchGoodsByIdReq) (*GoodsListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsListById not implemented")
}
func (UnimplementedGoodsServer) CreateGoods(context.Context, *WriteGoodsInfoReq) (*GoodsInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoods not implemented")
}
func (UnimplementedGoodsServer) DeleteGoods(context.Context, *DelGoodsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoods not implemented")
}
func (UnimplementedGoodsServer) UpdeateGoods(context.Context, *WriteGoodsInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdeateGoods not implemented")
}
func (UnimplementedGoodsServer) GetGoodsDetail(context.Context, *GoodsInfoReq) (*GoodsInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsDetail not implemented")
}
func (UnimplementedGoodsServer) GetAllCategyList(context.Context, *emptypb.Empty) (*CategyListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategyList not implemented")
}
func (UnimplementedGoodsServer) GetSubCategy(context.Context, *SubCategyReq) (*SubCategyListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCategy not implemented")
}
func (UnimplementedGoodsServer) CreateCategy(context.Context, *CategyInfoReq) (*CategyInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategy not implemented")
}
func (UnimplementedGoodsServer) DeleteCategy(context.Context, *DelCategyReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategy not implemented")
}
func (UnimplementedGoodsServer) UpdateCategy(context.Context, *CategyInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategy not implemented")
}
func (UnimplementedGoodsServer) GetBrandList(context.Context, *BrandFilterReq) (*BrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}
func (UnimplementedGoodsServer) CreateBrand(context.Context, *BrandInfoReq) (*BrandInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedGoodsServer) DeleteBrand(context.Context, *DelBrandReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedGoodsServer) UpdateBrand(context.Context, *BrandInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedGoodsServer) GetBannerList(context.Context, *emptypb.Empty) (*BannerListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerList not implemented")
}
func (UnimplementedGoodsServer) CreateBanner(context.Context, *BannerInfoReq) (*BannerInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedGoodsServer) DeleteBanner(context.Context, *DelBrandReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedGoodsServer) UpdateBanner(context.Context, *BannerInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedGoodsServer) GetCategyBrandList(context.Context, *CategyBrandFilterReq) (*CategyBrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategyBrandList not implemented")
}
func (UnimplementedGoodsServer) GetBrandListByCategy(context.Context, *CategyInfoReq) (*BrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandListByCategy not implemented")
}
func (UnimplementedGoodsServer) CreateCategyBrand(context.Context, *CategyBrandInfoReq) (*CategyBrandInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategyBrand not implemented")
}
func (UnimplementedGoodsServer) DeleteCategyBrand(context.Context, *CategyBrandInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategyBrand not implemented")
}
func (UnimplementedGoodsServer) UpdateCategyBrand(context.Context, *CategyBrandInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategyBrand not implemented")
}
func (UnimplementedGoodsServer) mustEmbedUnimplementedGoodsServer() {}

// UnsafeGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServer will
// result in compilation errors.
type UnsafeGoodsServer interface {
	mustEmbedUnimplementedGoodsServer()
}

func RegisterGoodsServer(s *grpc.Server, srv GoodsServer) {
	s.RegisterService(&_Goods_serviceDesc, srv)
}

func _Goods_GetGoodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetGoodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodList(ctx, req.(*GoodsFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsListById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGoodsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsListById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetGoodsListById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsListById(ctx, req.(*BatchGoodsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteGoodsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/CreateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateGoods(ctx, req.(*WriteGoodsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeleteGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeleteGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/DeleteGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeleteGoods(ctx, req.(*DelGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdeateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteGoodsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdeateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/UpdeateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdeateGoods(ctx, req.(*WriteGoodsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsDetail(ctx, req.(*GoodsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetAllCategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetAllCategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetAllCategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetAllCategyList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetSubCategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetSubCategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetSubCategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetSubCategy(ctx, req.(*SubCategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateCategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateCategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/CreateCategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateCategy(ctx, req.(*CategyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeleteCategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCategyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeleteCategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/DeleteCategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeleteCategy(ctx, req.(*DelCategyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateCategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateCategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/UpdateCategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateCategy(ctx, req.(*CategyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetBrandList(ctx, req.(*BrandFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateBrand(ctx, req.(*BrandInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/DeleteBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeleteBrand(ctx, req.(*DelBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateBrand(ctx, req.(*BrandInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetBannerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetBannerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetBannerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetBannerList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateBanner(ctx, req.(*BannerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/DeleteBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeleteBanner(ctx, req.(*DelBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/UpdateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateBanner(ctx, req.(*BannerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetCategyBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategyBrandFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetCategyBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetCategyBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetCategyBrandList(ctx, req.(*CategyBrandFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetBrandListByCategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetBrandListByCategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/GetBrandListByCategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetBrandListByCategy(ctx, req.(*CategyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateCategyBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategyBrandInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateCategyBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/CreateCategyBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateCategyBrand(ctx, req.(*CategyBrandInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_DeleteCategyBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategyBrandInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).DeleteCategyBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/DeleteCategyBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).DeleteCategyBrand(ctx, req.(*CategyBrandInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateCategyBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategyBrandInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateCategyBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Goods/UpdateCategyBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateCategyBrand(ctx, req.(*CategyBrandInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Goods_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodList",
			Handler:    _Goods_GetGoodList_Handler,
		},
		{
			MethodName: "GetGoodsListById",
			Handler:    _Goods_GetGoodsListById_Handler,
		},
		{
			MethodName: "CreateGoods",
			Handler:    _Goods_CreateGoods_Handler,
		},
		{
			MethodName: "DeleteGoods",
			Handler:    _Goods_DeleteGoods_Handler,
		},
		{
			MethodName: "UpdeateGoods",
			Handler:    _Goods_UpdeateGoods_Handler,
		},
		{
			MethodName: "GetGoodsDetail",
			Handler:    _Goods_GetGoodsDetail_Handler,
		},
		{
			MethodName: "GetAllCategyList",
			Handler:    _Goods_GetAllCategyList_Handler,
		},
		{
			MethodName: "GetSubCategy",
			Handler:    _Goods_GetSubCategy_Handler,
		},
		{
			MethodName: "CreateCategy",
			Handler:    _Goods_CreateCategy_Handler,
		},
		{
			MethodName: "DeleteCategy",
			Handler:    _Goods_DeleteCategy_Handler,
		},
		{
			MethodName: "UpdateCategy",
			Handler:    _Goods_UpdateCategy_Handler,
		},
		{
			MethodName: "GetBrandList",
			Handler:    _Goods_GetBrandList_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _Goods_CreateBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _Goods_DeleteBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _Goods_UpdateBrand_Handler,
		},
		{
			MethodName: "GetBannerList",
			Handler:    _Goods_GetBannerList_Handler,
		},
		{
			MethodName: "CreateBanner",
			Handler:    _Goods_CreateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _Goods_DeleteBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _Goods_UpdateBanner_Handler,
		},
		{
			MethodName: "GetCategyBrandList",
			Handler:    _Goods_GetCategyBrandList_Handler,
		},
		{
			MethodName: "GetBrandListByCategy",
			Handler:    _Goods_GetBrandListByCategy_Handler,
		},
		{
			MethodName: "CreateCategyBrand",
			Handler:    _Goods_CreateCategyBrand_Handler,
		},
		{
			MethodName: "DeleteCategyBrand",
			Handler:    _Goods_DeleteCategyBrand_Handler,
		},
		{
			MethodName: "UpdateCategyBrand",
			Handler:    _Goods_UpdateCategyBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
