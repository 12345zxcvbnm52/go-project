// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryClient interface {
	CreateStock(ctx context.Context, in *WriteInvtReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateStock(ctx context.Context, in *WriteInvtReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetStock(ctx context.Context, in *WriteInvtReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindStock(ctx context.Context, in *StockInfoReq, opts ...grpc.CallOption) (*StockInfoRes, error)
	// 这里可以考虑在Res中列举哪些库存扣减成功,哪些失败
	// 暂时避免复杂化就只允许要么成功全部扣减,要么返回错误
	DecrStock(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IncrStock(ctx context.Context, in *IncrStockReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) CreateStock(ctx context.Context, in *WriteInvtReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Inventory/CreateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateStock(ctx context.Context, in *WriteInvtReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Inventory/UpdateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) SetStock(ctx context.Context, in *WriteInvtReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Inventory/SetStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) FindStock(ctx context.Context, in *StockInfoReq, opts ...grpc.CallOption) (*StockInfoRes, error) {
	out := new(StockInfoRes)
	err := c.cc.Invoke(ctx, "/Inventory/FindStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DecrStock(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Inventory/DecrStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) IncrStock(ctx context.Context, in *IncrStockReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Inventory/IncrStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
// All implementations must embed UnimplementedInventoryServer
// for forward compatibility
type InventoryServer interface {
	CreateStock(context.Context, *WriteInvtReq) (*emptypb.Empty, error)
	UpdateStock(context.Context, *WriteInvtReq) (*emptypb.Empty, error)
	SetStock(context.Context, *WriteInvtReq) (*emptypb.Empty, error)
	FindStock(context.Context, *StockInfoReq) (*StockInfoRes, error)
	// 这里可以考虑在Res中列举哪些库存扣减成功,哪些失败
	// 暂时避免复杂化就只允许要么成功全部扣减,要么返回错误
	DecrStock(context.Context, *DecrStockReq) (*emptypb.Empty, error)
	IncrStock(context.Context, *IncrStockReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedInventoryServer()
}

// UnimplementedInventoryServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (UnimplementedInventoryServer) CreateStock(context.Context, *WriteInvtReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStock not implemented")
}
func (UnimplementedInventoryServer) UpdateStock(context.Context, *WriteInvtReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedInventoryServer) SetStock(context.Context, *WriteInvtReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStock not implemented")
}
func (UnimplementedInventoryServer) FindStock(context.Context, *StockInfoReq) (*StockInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStock not implemented")
}
func (UnimplementedInventoryServer) DecrStock(context.Context, *DecrStockReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrStock not implemented")
}
func (UnimplementedInventoryServer) IncrStock(context.Context, *IncrStockReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrStock not implemented")
}
func (UnimplementedInventoryServer) mustEmbedUnimplementedInventoryServer() {}

// UnsafeInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServer will
// result in compilation errors.
type UnsafeInventoryServer interface {
	mustEmbedUnimplementedInventoryServer()
}

func RegisterInventoryServer(s *grpc.Server, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_CreateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteInvtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).CreateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/CreateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).CreateStock(ctx, req.(*WriteInvtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteInvtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/UpdateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateStock(ctx, req.(*WriteInvtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_SetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteInvtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).SetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/SetStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).SetStock(ctx, req.(*WriteInvtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_FindStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).FindStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/FindStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).FindStock(ctx, req.(*StockInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DecrStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DecrStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/DecrStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DecrStock(ctx, req.(*DecrStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_IncrStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).IncrStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Inventory/IncrStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).IncrStock(ctx, req.(*IncrStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStock",
			Handler:    _Inventory_CreateStock_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _Inventory_UpdateStock_Handler,
		},
		{
			MethodName: "SetStock",
			Handler:    _Inventory_SetStock_Handler,
		},
		{
			MethodName: "FindStock",
			Handler:    _Inventory_FindStock_Handler,
		},
		{
			MethodName: "DecrStock",
			Handler:    _Inventory_DecrStock_Handler,
		},
		{
			MethodName: "IncrStock",
			Handler:    _Inventory_IncrStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
